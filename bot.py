import os
import logging
import asyncio
import signal
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.error import NetworkError, RetryAfter
from binance.client import Client
import requests

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
BOT_TOKEN = "8279909476:AAF4bRExh18Ve5pQ2F-wAHdBcQLfda-yNOU"  # –í–∞—à —Ç–æ–∫–µ–Ω

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–û–í ==========
try:
    client = Client()
    logger.info("Binance client initialized successfully")
except Exception as e:
    logger.warning(f"Binance client init failed: {e}")
    client = None

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_reply_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [KeyboardButton("üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å"), KeyboardButton("üßÆ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [KeyboardButton("üìã –ú–µ–Ω—é"), KeyboardButton("üÜò –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_main_inline_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å TON", callback_data='get_price')],
        [InlineKeyboardButton("üßÆ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", switch_inline_query_current_chat="/convert ")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data='sources')]
    ]
    return InlineKeyboardMarkup(keyboard)

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –¶–ï–ù ==========
async def get_p2p_price_binance():
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å P2P Binance"""
    try:
        data = {
            "proMerchantAds": False,
            "page": 1,
            "rows": 20,
            "payTypes": [],
            "countries": [],
            "publisherType": None,
            "fiat": "RUB",
            "tradeType": "BUY",
            "asset": "USDT",
            "transAmount": ""
        }

        response = requests.post(
            'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search',
            headers={'Content-Type': 'application/json'},
            json=data,
            timeout=10
        )
        
        result = response.json()
        
        if not result['success'] or not result['data']:
            logger.warning("Binance P2P: no offers found")
            return None

        ads = result['data']
        prices = []

        for ad in ads:
            try:
                adv_info = ad['adv']
                if (float(adv_info['surplusAmount']) > 0 and 
                    adv_info['tradeMethods'] and
                    adv_info['price']):
                    price = float(adv_info['price'])
                    prices.append(price)
            except (KeyError, ValueError):
                continue

        if prices:
            top_prices = sorted(prices)[:5]
            average_price = sum(top_prices) / len(top_prices)
            logger.info(f"Binance P2P: found {len(prices)} offers, average price: {average_price}")
            return round(average_price, 2)
        else:
            logger.warning("Binance P2P: no valid offers found")
            return None

    except Exception as e:
        logger.error(f"Binance P2P error: {e}")
        return None

async def get_spot_price_binance():
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å —Å–ø–æ—Ç–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ Binance"""
    if client is None:
        return None
    try:
        ticker = client.get_symbol_ticker(symbol="USDTRUB")
        usdt_rub_price = float(ticker['price'])
        logger.info(f"Binance Spot price: {usdt_rub_price}")
        return round(usdt_rub_price, 2)
    except Exception as e:
        logger.error(f"Binance Spot error: {e}")
        return None

async def get_price_coingecko():
    """–ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É USDT/RUB —Å CoinGecko"""
    try:
        response = requests.get(
            'https://api.coingecko.com/api/v3/simple/price?ids=tether&vs_currencies=rub',
            timeout=10
        )
        data = response.json()
        usdt_rub_price = data['tether']['rub']
        logger.info(f"CoinGecko price: {usdt_rub_price}")
        return usdt_rub_price
    except Exception as e:
        logger.error(f"CoinGecko error: {e}")
        return None

async def get_ton_price():
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É TON –∫ USDT"""
    if client is None:
        return None
    try:
        ticker = client.get_symbol_ticker(symbol="TONUSDT")
        ton_price = float(ticker['price'])
        logger.info(f"TON price: {ton_price}")
        return ton_price
    except Exception as e:
        logger.error(f"TON price error: {e}")
        return None

async def get_usdt_rub_price():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã USDT/RUB"""
    price_sources = [
        (get_p2p_price_binance, "P2P Binance"),
        (get_spot_price_binance, "Spot Binance"),
        (get_price_coingecko, "CoinGecko")
    ]
    
    for price_func, source in price_sources:
        price = await price_func()
        if price is not None:
            return price, source
    
    return None, "No data"

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = (
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
        "üíé <b>TON Price Bot</b> –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON\n"
        "–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö P2P-—Å–¥–µ–ª–æ–∫ –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "üöÄ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n"
        "‚Ä¢ <b>–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å</b> - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ TON\n"
        "‚Ä¢ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</b> - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ TON –≤ —Ä—É–±–ª–∏\n"
        "‚Ä¢ <b>–ú–µ–Ω—é</b> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n\n"
        "üìä <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>\n\n"
        "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</i>"
    )
    
    await update.message.reply_text(welcome_text, 
                                  reply_markup=get_main_inline_keyboard(), 
                                  parse_mode='HTML')
    await update.message.reply_text("‚å®Ô∏è <b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>", 
                                  reply_markup=get_main_reply_keyboard(), 
                                  parse_mode='HTML')

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    menu_text = (
        "üìã <b>–ú–µ–Ω—é TON Price Bot</b>\n\n"
        "üíé <b>–û –±–æ—Ç–µ:</b>\n"
        "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ P2P-—Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –±–∏—Ä–∂–∞—Ö \n"
        "–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å TON –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "üöÄ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <b>/start</b> - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ <b>/menu</b> - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é\n"
        "‚Ä¢ <b>/price</b> - —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON\n"
        "‚Ä¢ <b>/convert</b> - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å TON –≤ —Ä—É–±–ª–∏\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/convert 5.5</code> - –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 5.5 TON\n\n"
        "üìä <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"
    )
    await update.message.reply_text(menu_text, parse_mode='HTML')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ TON Price Bot</b>\n\n"
        "üíé <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å</b> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ <b>üßÆ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</b> –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ TON –≤ —Ä—É–±–ª–∏\n"
        "‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "  <code>/price</code> - –∫—É—Ä—Å TON\n"
        "  <code>/convert 10</code> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 10 TON\n\n"
        "üîß <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ P2P Binance (–æ—Å–Ω–æ–≤–Ω–æ–π)\n"
        "‚Ä¢ Spot Binance (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π)\n"
        "‚Ä¢ CoinGecko (–∞–≤–∞—Ä–∏–π–Ω—ã–π)\n\n"
        "üìû <b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'get_price':
        await send_price_message(query.message)
    elif query.data == 'sources':
        sources_text = (
            "üìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
            "‚Ä¢ <b>P2P Binance</b> - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å P2P-–ø–ª–æ—â–∞–¥–∫–∏\n"
            "‚Ä¢ <b>Spot Binance</b> - –±–∏—Ä–∂–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∑–µ—Ä–≤)\n"
            "‚Ä¢ <b>CoinGecko</b> - –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä —Ü–µ–Ω (–∞–≤–∞—Ä–∏–π–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)\n\n"
            "üí° –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        )
        await query.message.reply_text(sources_text, parse_mode='HTML')

async def send_price_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π"""
    await message.reply_chat_action(action="typing")
    
    usdt_rub_price, source = await get_usdt_rub_price()
    ton_usdt_price = await get_ton_price()

    if usdt_rub_price and ton_usdt_price:
        ton_rub_price = ton_usdt_price * usdt_rub_price
        message_text = (
            f"üíé <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON</b>\n\n"
            f"‚Ä¢ <b>1 TON</b> = <b>{ton_rub_price:,.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ 1 USDT = {usdt_rub_price} ‚ÇΩ ({source})\n"
            f"‚Ä¢ 1 TON = {ton_usdt_price:,.4f} $\n\n"
            f"üìä <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {source}</i>\n"
            f"üîÑ <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /convert –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤</i>"
        )
    else:
        message_text = (
            "üòï <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ persists, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
        )
    
    await message.reply_text(message_text, parse_mode='HTML')

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    await send_price_message(update.message)

async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert"""
    await update.message.reply_chat_action(action="typing")
    
    if not context.args:
        help_text = (
            "üßÆ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON –≤ —Ä—É–±–ª–∏</b>\n\n"
            "üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:</i>\n"
            "<code>/convert 5.5</code>\n\n"
            "üìù <i>–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ \"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\"</i>"
        )
        await update.message.reply_text(help_text, parse_mode='HTML')
        return

    try:
        amount = float(context.args[0])
        if amount <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>/convert 5.5</code>", 
            parse_mode='HTML'
        )
        return

    usdt_rub_price, source = await get_usdt_rub_price()
    ton_usdt_price = await get_ton_price()

    if usdt_rub_price and ton_usdt_price:
        result = (amount * ton_usdt_price) * usdt_rub_price
        message_text = (
            f"üßÆ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON</b>\n\n"
            f"‚Ä¢ <b>{amount} TON</b> = <b>{result:,.2f} ‚ÇΩ</b>\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 TON = {ton_usdt_price:,.4f} $\n"
            f"‚Ä¢ –ö—É—Ä—Å: 1 USDT = {usdt_rub_price} ‚ÇΩ\n"
            f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {source}\n\n"
            f"üí° <i>–î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /price</i>"
        )
        await update.message.reply_text(message_text, parse_mode='HTML')
    else:
        error_text = (
            "üòï <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /price –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
        )
        await update.message.reply_text(error_text, parse_mode='HTML')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è reply-–∫–Ω–æ–ø–æ–∫)"""
    text = update.message.text
    
    if text == "üí∞ –£–∑–Ω–∞—Ç—å –∫—É—Ä—Å":
        await send_price_message(update.message)
    elif text == "üßÆ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
        await update.message.reply_text(
            "üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>5.5</code> –∏–ª–∏ <code>/convert 5.5</code>",
            parse_mode='HTML'
        )
    elif text == "üìã –ú–µ–Ω—é":
        await menu(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ==========
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    if isinstance(context.error, (NetworkError, RetryAfter)):
        # –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        return
        
    try:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üòï <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
    except:
        pass

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("convert", convert))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è reply-–∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    def shutdown(signum, frame):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        application.stop()
        application.shutdown()

    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGINT, shutdown)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º —Ü–∏–∫–ª–æ–º
    try:
        application.run_polling()
    except Exception as e:
        logger.error(f"Critical error: {e}")

if __name__ == '__main__':
    main()
